#!/usr/bin/env python

# Running:
#   ./play_random <directory>
#   # You can control playback with the following keys:
#   #   'q' : quit
#   #   'n' : go to the next random song
#   #   'p' : pause/play

import contextlib
import fcntl
import os
import random
import select
import signal
import subprocess
import sys
import threading
import termios
import time

@contextlib.contextmanager
def terminal_settings():
  fd = sys.stdin.fileno()
  try:
    # Make stdin nonblocking
    fl = fcntl.fcntl(fd, fcntl.F_GETFL)
    fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)

    # Turn off canonical mode (to make input available immediately; as per
    # termios(3)), and turn off character echoing.
    oldterm = termios.tcgetattr(fd)
    newattr = termios.tcgetattr(fd)
    newattr[3] = newattr[3] & ~termios.ICANON & ~termios.ECHO
    termios.tcsetattr(fd, termios.TCSANOW, newattr)

    yield
  finally:
    # Restore original settings
    termios.tcsetattr(fd, termios.TCSAFLUSH, oldterm)

def get_keypress_if_any():
  try:
    return sys.stdin.read(1)
  except IOError:
    return None

def play_videos(playlist, c):
  choices = os.listdir('.')
  bitbucket = open(os.devnull, 'w')
  while True:
    next = random.choice(choices)
    nextname = next
    if len(nextname) > 60:
      nextname = nextname[0:60]+"..."
    print("Playing {}".format(nextname))
    cmd = ['ffplay', '-nodisp', '-loglevel', 'quiet', '-autoexit', next]
    c['proc'] = subprocess.Popen(cmd, stdout=bitbucket)
    c['proc'].wait()

playlist_dir = os.path.join(os.environ['HOME'], 'playlists')
if not os.path.isdir(playlist_dir):
  raise SystemExit("Could not find playlist_dir!")
if len(sys.argv) < 2:
  playlists = [x for x in os.listdir(playlist_dir)
                       if os.path.isdir(os.path.join(playlist_dir, x))
                          and not x.endswith('-unclipped')]
  raise SystemExit("Syntax: {} {}".format(sys.argv[0], playlists))
playlist = sys.argv[1]
os.chdir(os.path.join(playlist_dir, playlist))
c = {}
vid_thread = threading.Thread(target=play_videos, args=(playlist, c))
vid_thread.daemon = True
vid_thread.start()
with terminal_settings():
  fd = sys.stdin.fileno()
  playing = True
  while True:
    select.select([fd], [], [])
    key = get_keypress_if_any()
    if key.lower() == 'q':
      print("Quitting.")
      c['proc'].terminate()
      break
    elif key.lower() == 'n':
      print("Skipping to next video.")
      c['proc'].terminate()
    elif key.lower() == 'p':
      playing ^= True
      if playing:
        c['proc'].send_signal(signal.SIGCONT)
      else:
        c['proc'].send_signal(signal.SIGSTOP)
    else:
      print("Unknown key: '{}' ({})".format(key, hex(ord(key[0]))))
      if len(key) > 1:
        raise SystemExit("Somehow got key with length > 1!")
